# Generated by Django 2.2.10 on 2021-11-24 09:47

import assets.models.asset
import assets.models.base
import assets.models.node
import common.fields.model
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_@\\-\\.]*$', 'Special char not allowed')], verbose_name='Username')),
                ('password', common.fields.model.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('become', models.BooleanField(default=True)),
                ('become_method', models.CharField(choices=[('sudo', 'sudo'), ('su', 'su')], default='sudo', max_length=4)),
                ('become_user', models.CharField(default='root', max_length=64)),
                ('_become_pass', models.CharField(blank=True, default='', max_length=128)),
            ],
            options={
                'verbose_name': 'Admin user',
                'ordering': ['name'],
            },
            bases=(models.Model, assets.models.base.AuthMixin, assets.models.base.ConnectivityMixin),
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ip', models.CharField(db_index=True, max_length=128, verbose_name='IP')),
                ('hostname', models.CharField(max_length=128, verbose_name='Hostname')),
                ('protocol', models.CharField(choices=[('ssh', 'ssh'), ('rdp', 'rdp'), ('telnet', 'telnet'), ('vnc', 'vnc')], default='ssh', max_length=128, verbose_name='Protocol')),
                ('port', models.IntegerField(default=22, verbose_name='Port')),
                ('protocols', models.CharField(blank=True, default='ssh/22', max_length=128, verbose_name='Protocols')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('public_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='Public IP')),
                ('number', models.CharField(blank=True, max_length=32, null=True, verbose_name='Asset number')),
                ('vendor', models.CharField(blank=True, max_length=64, null=True, verbose_name='Vendor')),
                ('model', models.CharField(blank=True, max_length=54, null=True, verbose_name='Model')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serial number')),
                ('cpu_model', models.CharField(blank=True, max_length=64, null=True, verbose_name='CPU model')),
                ('cpu_count', models.IntegerField(null=True, verbose_name='CPU count')),
                ('cpu_cores', models.IntegerField(null=True, verbose_name='CPU cores')),
                ('cpu_vcpus', models.IntegerField(null=True, verbose_name='CPU vcpus')),
                ('memory', models.CharField(blank=True, max_length=64, null=True, verbose_name='Memory')),
                ('disk_total', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Disk total')),
                ('disk_info', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Disk info')),
                ('os', models.CharField(blank=True, max_length=128, null=True, verbose_name='OS')),
                ('os_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='OS version')),
                ('os_arch', models.CharField(blank=True, max_length=16, null=True, verbose_name='OS arch')),
                ('hostname_raw', models.CharField(blank=True, max_length=128, null=True, verbose_name='Hostname raw')),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, default='', max_length=128, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Asset',
            },
            bases=(assets.models.asset.ProtocolsMixin, assets.models.asset.NodesRelationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AssetExpansion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('hostname', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Hostname')),
                ('instance', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Instance name')),
                ('memory', models.IntegerField(blank=True, null=True, verbose_name='Memory')),
                ('core_thread', models.IntegerField(blank=True, null=True, verbose_name='Cpu threads')),
                ('cpu_vcpus', models.IntegerField(blank=True, null=True, verbose_name='Virtual cpu')),
                ('cpu_cores', models.IntegerField(blank=True, null=True, verbose_name='Cpu core')),
                ('localstoranum', models.IntegerField(blank=True, null=True, verbose_name='Number of data disks')),
                ('localstorasize', models.IntegerField(blank=True, null=True, verbose_name='Single disk size')),
                ('os_version', models.CharField(blank=True, db_index=True, max_length=32, null=True, verbose_name='OS version')),
                ('os_arch', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Release')),
                ('images', models.CharField(blank=True, max_length=64, null=True, verbose_name='Mirror image')),
                ('vpc', models.CharField(blank=True, max_length=128, null=True, verbose_name='Vpc network')),
                ('security', models.CharField(blank=True, max_length=512, null=True, verbose_name='Security group')),
                ('vswaitch', models.CharField(blank=True, max_length=128, null=True, verbose_name='Virtual switch')),
                ('instancetype', models.CharField(blank=True, max_length=128, null=True, verbose_name='Instance type')),
                ('eip', models.GenericIPAddressField(blank=True, db_index=True, null=True, verbose_name='Flexible ip')),
                ('ebandwidth', models.IntegerField(blank=True, null=True, verbose_name='Elastic ip bandwidth')),
                ('paybywidth', models.CharField(choices=[('PayByBandwidth', '固定带宽'), ('PayByTraffic', '按流量'), ('PayOnDemand', '按量付费'), ('PrePay', '包年包月')], max_length=64, verbose_name='Bandwidth billing method')),
                ('publicip', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Public IP')),
                ('primaryip', models.GenericIPAddressField(blank=True, db_index=True, null=True, verbose_name='IP')),
                ('primarynetwork', models.CharField(blank=True, max_length=128, null=True, verbose_name='Private network card')),
                ('primarymac', models.CharField(blank=True, max_length=128, null=True, verbose_name='Private network card mac')),
                ('regionid', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Area')),
                ('zoneid', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Availability zone')),
                ('chargetype', models.CharField(choices=[('PrePaid', '包年包月'), ('PostPaid', '按量付费')], db_index=True, max_length=64, verbose_name='Billing method')),
                ('operuser', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Operation and maintenance principal')),
                ('devuser', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Development Director')),
                ('dept', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='Department')),
                ('status', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Status')),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='Creation time')),
                ('expired_time', models.DateTimeField(blank=True, null=True, verbose_name='Expired')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('update_data', models.DateTimeField(auto_now=True, null=True, verbose_name='Date updated')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'AssetExpansion',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='AssetGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Asset group',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuthBook',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_@\\-\\.]*$', 'Special char not allowed')], verbose_name='Username')),
                ('password', common.fields.model.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('is_latest', models.BooleanField(default=False, verbose_name='Latest version')),
                ('version', models.IntegerField(default=1, verbose_name='Version')),
            ],
            options={
                'verbose_name': 'AuthBook',
            },
            bases=(models.Model, assets.models.base.AuthMixin, assets.models.base.ConnectivityMixin),
        ),
        migrations.CreateModel(
            name='Balanced',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('loadid', models.CharField(blank=True, max_length=128, null=True, verbose_name='Instance id')),
                ('ip', models.GenericIPAddressField(blank=True, db_index=True, null=True, verbose_name='IP')),
                ('loadname', models.CharField(blank=True, max_length=512, null=True, verbose_name='Instance name')),
                ('vswitchId', models.CharField(blank=True, max_length=128, null=True, verbose_name='Virtual switch')),
                ('resgroup', models.CharField(blank=True, max_length=128, null=True, verbose_name='Enterprise Resource Group')),
                ('paytype', models.CharField(choices=[('PayByBandwidth', '固定带宽'), ('PayByTraffic', '按流量'), ('PayOnDemand', '按量付费'), ('PrePay', '包年包月')], max_length=64, verbose_name='Billing method')),
                ('masterzoneid', models.CharField(blank=True, max_length=128, null=True, verbose_name='Main zone')),
                ('slavezoneid', models.CharField(blank=True, max_length=128, null=True, verbose_name='Backup zone')),
                ('addresstype', models.CharField(choices=[('internet', '公网'), ('intranet', '内网')], max_length=64, verbose_name='Network Type')),
                ('loadbalancerspec', models.CharField(blank=True, max_length=128, null=True, verbose_name='Instance type')),
                ('vpcid', models.CharField(blank=True, max_length=128, null=True, verbose_name='Vpc network')),
                ('regionid', models.CharField(blank=True, max_length=128, null=True, verbose_name='Area')),
                ('status', models.CharField(blank=True, max_length=128, null=True, verbose_name='Status')),
                ('describeinfo', models.TextField(blank=True, null=True, verbose_name='Detail')),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='Creation time')),
                ('update_data', models.DateTimeField(auto_now=True, null=True, verbose_name='Date updated')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Balanced',
                'ordering': ['ip'],
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('bandwidth', models.CharField(blank=True, max_length=32, verbose_name='Bandwidth')),
                ('contact', models.CharField(blank=True, max_length=128, verbose_name='Contact')),
                ('phone', models.CharField(blank=True, max_length=32, verbose_name='Phone')),
                ('address', models.CharField(blank=True, max_length=128, verbose_name='Address')),
                ('intranet', models.TextField(blank=True, verbose_name='Intranet')),
                ('extranet', models.TextField(blank=True, verbose_name='Extranet')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('operator', models.CharField(blank=True, max_length=32, verbose_name='Operator')),
                ('created_by', models.CharField(blank=True, max_length=32, verbose_name='Created by')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Cluster',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CommandFilter',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, default='', max_length=128, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Command filter',
            },
        ),
        migrations.CreateModel(
            name='CommandFilterRule',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('regex', 'Regex'), ('command', 'Command')], default='command', max_length=16, verbose_name='Type')),
                ('priority', models.IntegerField(default=50, help_text='1-100, the higher will be match first', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Priority')),
                ('content', models.TextField(help_text='One line one command', max_length=1024, verbose_name='Content')),
                ('action', models.IntegerField(choices=[(0, 'Deny'), (1, 'Allow')], default=0, verbose_name='Action')),
                ('comment', models.CharField(blank=True, default='', max_length=64, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, default='', max_length=128, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Command filter rule',
                'ordering': ('-priority', 'action'),
            },
        ),
        migrations.CreateModel(
            name='DiskInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('diskid', models.CharField(blank=True, max_length=64, null=True, verbose_name='Disk id')),
                ('device', models.CharField(blank=True, max_length=32, null=True, verbose_name='Disk device')),
                ('category', models.CharField(choices=[('cloud', '普通云盘'), ('cloud_efficiency', '高效云盘'), ('cloud_ssd', 'SSD盘'), ('cloud_essd', 'ESSD云盘'), ('local_ssd_pro', 'I/O密集型本地盘'), ('local_hdd_pro', '吞吐密集型本地盘')], max_length=64, verbose_name='Disk type')),
                ('disk_size', models.BigIntegerField(blank=True, null=True, verbose_name='Disk size')),
                ('chargetype', models.CharField(choices=[('PrePaid', '包年包月'), ('PostPaid', '按量付费')], db_index=True, max_length=64, verbose_name='Billing method')),
                ('zoneid', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Availability zone')),
                ('delwith', models.CharField(choices=[('false', '保留不释放'), ('true', '随实例释放')], default='false', max_length=64, verbose_name='Release method')),
                ('snapshot', models.CharField(blank=True, choices=[('true', '已设置'), ('false', '未设置')], max_length=64, null=True, verbose_name='Automatic snapshot strategy')),
                ('autoanspshot', models.CharField(blank=True, choices=[('true', '启用'), ('false', '未启用')], max_length=64, null=True, verbose_name='Snapshot policy function')),
                ('regionid', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Area')),
                ('disk_type', models.CharField(choices=[('system', '系统盘'), ('data', '数据盘')], max_length=64, verbose_name='Disk attributes')),
                ('encrypted', models.CharField(default='false', max_length=64, verbose_name='Whether to encrypt')),
                ('status', models.CharField(blank=True, choices=[('In_use', '使用中'), ('Available', '待挂载')], max_length=64, null=True, verbose_name='Status')),
                ('expired_time', models.DateTimeField(blank=True, null=True, verbose_name='Expired')),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='Creation time')),
                ('update_data', models.DateTimeField(auto_now=True, null=True, verbose_name='Date updated')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'DiskInfo',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
            ],
            options={
                'verbose_name': 'Domain',
            },
        ),
        migrations.CreateModel(
            name='FavoriteAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
            ],
        ),
        migrations.CreateModel(
            name='Gateway',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_@\\-\\.]*$', 'Special char not allowed')], verbose_name='Username')),
                ('password', common.fields.model.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('ip', models.GenericIPAddressField(db_index=True, verbose_name='IP')),
                ('port', models.IntegerField(default=22, verbose_name='Port')),
                ('protocol', models.CharField(choices=[('ssh', 'ssh'), ('rdp', 'rdp')], default='ssh', max_length=16, verbose_name='Protocol')),
                ('comment', models.CharField(blank=True, max_length=128, null=True, verbose_name='Comment')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Gateway',
            },
            bases=(models.Model, assets.models.base.AuthMixin, assets.models.base.ConnectivityMixin),
        ),
        migrations.CreateModel(
            name='GatheredUser',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, verbose_name='Username')),
                ('present', models.BooleanField(default=True, verbose_name='Present')),
                ('date_last_login', models.DateTimeField(null=True, verbose_name='Date last login')),
                ('ip_last_login', models.CharField(default='', max_length=39, verbose_name='IP last login')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
            ],
            options={
                'verbose_name': 'GatherUser',
                'ordering': ['asset'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('value', models.CharField(max_length=128, verbose_name='Value')),
                ('category', models.CharField(choices=[('S', 'System'), ('U', 'User')], default='U', max_length=128, verbose_name='Category')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
            ],
            options={
                'db_table': 'assets_label',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64, unique=True, verbose_name='Key')),
                ('value', models.CharField(max_length=128, verbose_name='Value')),
                ('child_mark', models.IntegerField(default=0)),
                ('date_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Node',
                'ordering': ['key'],
            },
            bases=(models.Model, assets.models.node.SomeNodesMixin, assets.models.node.TreeMixin, assets.models.node.FamilyMixin, assets.models.node.FullValueMixin, assets.models.node.NodeAssetsMixin),
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(allow_unicode=True, unique=True, verbose_name='Name')),
                ('base', models.CharField(choices=[('Linux', 'Linux'), ('Unix', 'Unix'), ('MacOS', 'MacOS'), ('BSD', 'BSD'), ('Windows', 'Windows'), ('Other', 'Other')], default='Linux', max_length=16, verbose_name='Base')),
                ('charset', models.CharField(choices=[('utf8', 'UTF-8'), ('gbk', 'GBK')], default='utf8', max_length=8, verbose_name='Charset')),
                ('meta', common.fields.model.JsonDictTextField(blank=True, null=True, verbose_name='Meta')),
                ('internal', models.BooleanField(default=False, verbose_name='Internal')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Platform',
            },
        ),
        migrations.CreateModel(
            name='SystemUser',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_@\\-\\.]*$', 'Special char not allowed')], verbose_name='Username')),
                ('password', common.fields.model.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.fields.model.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('username_same_with_user', models.BooleanField(default=False, verbose_name='Username same with user')),
                ('priority', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Priority')),
                ('protocol', models.CharField(choices=[('ssh', 'ssh'), ('rdp', 'rdp'), ('telnet', 'telnet'), ('vnc', 'vnc'), ('mysql', 'mysql')], default='ssh', max_length=16, verbose_name='Protocol')),
                ('auto_push', models.BooleanField(default=True, verbose_name='Auto push')),
                ('sudo', models.TextField(default='/bin/whoami', verbose_name='Sudo')),
                ('shell', models.CharField(default='/bin/bash', max_length=64, verbose_name='Shell')),
                ('login_mode', models.CharField(choices=[('auto', 'Automatic login'), ('manual', 'Manually login')], default='auto', max_length=10, verbose_name='Login mode')),
                ('sftp_root', models.CharField(default='tmp', max_length=128, verbose_name='SFTP Root')),
                ('assets', models.ManyToManyField(blank=True, to='assets.Asset', verbose_name='Assets')),
                ('cmd_filters', models.ManyToManyField(blank=True, related_name='system_users', to='assets.CommandFilter', verbose_name='Command filter')),
            ],
            options={
                'verbose_name': 'System user',
                'ordering': ['name'],
            },
            bases=(models.Model, assets.models.base.AuthMixin, assets.models.base.ConnectivityMixin),
        ),
    ]
